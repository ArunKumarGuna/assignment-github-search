{"ast":null,"code":"var _jsxFileName = \"/Users/arunkumarg/ReactSinglePage/github-searcher/src/searcher.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { GridList, GridListTile, GridListTileBar, IconButton, TextField, InputLabel, Select, FormControl, withStyles, CircularProgress } from '@material-ui/core';\nimport { fetchToDos } from './Action/dataAction';\nimport { bindActionCreators, compose } from 'redux';\nimport { connect } from 'react-redux';\nimport searchStyle from './searchStyle.css';\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  formControl: {\n    margin: theme.spacing.unit,\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing.unit * 2\n  },\n  root1: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper\n  },\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)'\n  },\n  loaderroot: {\n    display: 'flex',\n    '& > * + *': {\n      marginLeft: theme.spacing(2),\n      display: \"flex\",\n      alignItems: 'center',\n      justifyContent: 'center'\n    }\n  }\n});\n\nlet selected = null,\n    searchPitem = '';\n\nclass Searcher extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selected: null,\n      listOfData: [],\n      searchPitem: ''\n    };\n\n    this.callApis = value => {\n      searchPitem = value;\n\n      if (selected != null) {\n        console.log(\"https://api.github.com/search/\" + selected + \"?q=\" + value); //this.setState({searchPitem: value});\n\n        searchPitem = value;\n        this.getOfflineOrOnlineData(value);\n      } else {\n        alert(\"Select Entity Type\");\n      }\n    };\n\n    this.getOfflineOrOnlineData = value => {\n      if (value.length >= 3) {\n        if (this.props.todos.datas.items != null || this.props.todos.datas.items != undefined) {\n          if (this.props.todos.datas.items.length > 0) {\n            var offlineData = [];\n\n            if (selected == \"repositories\") {\n              offlineData = this.props.todos.datas.items.filter(item => {\n                return item.owner.login.startsWith(value);\n              });\n            } else {\n              offlineData = this.props.todos.datas.items.filter(item => {\n                return item.login.startsWith(value);\n              });\n            }\n\n            if (offlineData.length != 0) {\n              this.props.todos.UIdata = offlineData;\n            } else {\n              this.props.fetchToDos(selected, value);\n            }\n          } else {\n            this.props.fetchToDos(selected, value);\n          }\n        } else {\n          this.props.fetchToDos(selected, value);\n        }\n      }\n    };\n\n    this.handleChange = value => {\n      //this.setState({selected:value})\n      selected = value;\n\n      if (searchPitem.length >= 3) {\n        //this.getOfflineOrOnlineData(searchPitem);\n        this.props.fetchToDos(value, searchPitem);\n      }\n    };\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    const {\n      selected\n    } = this.state;\n    const {\n      datas,\n      isFetching,\n      error,\n      dataFetched\n    } = this.props.todos;\n    let gridListItems = '';\n\n    if (selected == 'repositories') {\n      gridListItems = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 23\n        }\n      }, isFetching && /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.loaderroot,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(CircularProgress, {\n        color: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }\n      })), this.props.todos.UIdata.length != 0 ? /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(GridList, {\n        cellHeight: 180,\n        cols: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 7\n        }\n      }, this.props.todos.UIdata.map(tile => /*#__PURE__*/React.createElement(GridListTile, {\n        key: tile.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: tile.owner.avatar_url,\n        alt: tile.owner.login,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(GridListTileBar, {\n        title: tile.owner.login,\n        subtitle: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }\n        }, \"by: \", tile.owner.login),\n        actionIcon: /*#__PURE__*/React.createElement(IconButton, {\n          \"aria-label\": `info about ${tile.owner.login}`,\n          className: classes.icon,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 17\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }\n      }))))) : /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }\n      }, \"No Data\"));\n    } else {\n      gridListItems = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 23\n        }\n      }, isFetching && /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.loaderroot,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(CircularProgress, {\n        color: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }\n      })), this.props.todos.UIdata.length != 0 ? /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(GridList, {\n        cellHeight: 180,\n        cols: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 7\n        }\n      }, this.props.todos.UIdata.map(tile => /*#__PURE__*/React.createElement(GridListTile, {\n        key: tile.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: tile.avatar_url,\n        alt: tile.login,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(GridListTileBar, {\n        title: tile.login,\n        subtitle: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 25\n          }\n        }, \"by: \", tile.login),\n        actionIcon: /*#__PURE__*/React.createElement(IconButton, {\n          \"aria-label\": `info about ${tile.login}`,\n          className: classes.icon,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }\n      }))))) : /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }\n      }, \"No Data\"));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"standard-search\",\n      label: \"Start typing to search\",\n      value: searchPitem,\n      variant: \"filled\",\n      onChange: event => this.callApis(event.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(FormControl, {\n      variant: \"filled\",\n      className: classes.formControl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      htmlFor: \"filled-age-native-simple\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }, \"Type\"), /*#__PURE__*/React.createElement(Select, {\n      native: true,\n      value: selected,\n      onChange: event => this.handleChange(event.target.value),\n      inputProps: {\n        id: 'filled-age-native-simple'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }\n    }, \"-Select-\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"users\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }\n    }, \"Users\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"repositories\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }\n    }, \"Repositories\")))), gridListItems);\n  }\n\n}\n\nSearcher.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    todos: state.DataReducer\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return { ...bindActionCreators({\n      fetchToDos\n    }, dispatch)\n  };\n}\n\nexport default compose(withStyles(styles), connect(mapStateToProps, mapDispatchToProps))(Searcher);","map":{"version":3,"sources":["/Users/arunkumarg/ReactSinglePage/github-searcher/src/searcher.js"],"names":["React","PropTypes","GridList","GridListTile","GridListTileBar","IconButton","TextField","InputLabel","Select","FormControl","withStyles","CircularProgress","fetchToDos","bindActionCreators","compose","connect","searchStyle","styles","theme","root","display","flexWrap","formControl","margin","spacing","unit","minWidth","selectEmpty","marginTop","root1","justifyContent","overflow","backgroundColor","palette","background","paper","icon","color","loaderroot","marginLeft","alignItems","selected","searchPitem","Searcher","Component","state","listOfData","callApis","value","console","log","getOfflineOrOnlineData","alert","length","props","todos","datas","items","undefined","offlineData","filter","item","owner","login","startsWith","UIdata","handleChange","render","classes","isFetching","error","dataFetched","gridListItems","map","tile","id","avatar_url","event","target","propTypes","object","isRequired","mapStateToProps","DataReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {GridList,GridListTile,GridListTileBar,IconButton,TextField,InputLabel,Select,FormControl,withStyles,CircularProgress} from '@material-ui/core';\nimport { fetchToDos } from './Action/dataAction'\nimport { bindActionCreators, compose } from 'redux';\nimport { connect } from 'react-redux';\nimport searchStyle from './searchStyle.css'\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  formControl: {\n    margin: theme.spacing.unit,\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing.unit * 2\n  },\n  root1: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n  },\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)',\n  },\n  loaderroot: {\n    display: 'flex',\n    '& > * + *': {\n      marginLeft: theme.spacing(2),\n      display: \"flex\",\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n  },\n});\nlet selected=null,searchPitem='';\n\nclass Searcher extends React.Component{\n  state = {\n    selected: null,\n    listOfData:[],\n    searchPitem:''\n  };\n\n  callApis = (value) => {\n    searchPitem = value;\n    if(selected != null){\n    console.log(\"https://api.github.com/search/\"+selected+\"?q=\"+value);\n    //this.setState({searchPitem: value});\n    searchPitem = value;\n    this.getOfflineOrOnlineData(value);\n    }else{\n      alert(\"Select Entity Type\");\n    }\n  }\n\n   getOfflineOrOnlineData = (value) => {\n    if(value.length >= 3){\n      if(this.props.todos.datas.items != null || this.props.todos.datas.items != undefined){\n      if(this.props.todos.datas.items.length>0){\n        \n        var offlineData = [];\n        if(selected == \"repositories\"){\n          offlineData = this.props.todos.datas.items.filter((item)=>{\n            return item.owner.login.startsWith(value);\n        })\n        }else{\n          offlineData = this.props.todos.datas.items.filter((item)=>{\n            return item.login.startsWith(value);\n        })\n        }\n        \n       if(offlineData.length != 0){\n        this.props.todos.UIdata = offlineData; \n       }\n        else{\n          this.props.fetchToDos(selected,value)\n        }\n      }else{\n        this.props.fetchToDos(selected,value)\n      }\n    }else{\n      this.props.fetchToDos(selected,value)\n    }\n    }\n  }\n\n  handleChange = (value) => {\n    //this.setState({selected:value})\n    selected = value;\n    if(searchPitem.length >= 3){\n      //this.getOfflineOrOnlineData(searchPitem);\n      this.props.fetchToDos(value,searchPitem)\n    }\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { selected } = this.state;\n    const { datas, isFetching, error, dataFetched } = this.props.todos;\n    let gridListItems = '';\n    if(selected == 'repositories'){\n      gridListItems = <div>{\n        isFetching && <div className={classes.loaderroot}>\n        {/* <CircularProgress /> */}\n        <CircularProgress color=\"secondary\" />\n      </div>\n      }\n      {this.props.todos.UIdata.length != 0 ?(\n      <div className={classes.root}>\n      <GridList cellHeight={180} cols={3} >\n        {/* <GridListTile key=\"Subheader\" style={{ height: 'auto' }}>\n        </GridListTile> */}\n        {this.props.todos.UIdata.map((tile) => (\n          <GridListTile key={tile.id}>\n            <img src={tile.owner.avatar_url} alt={tile.owner.login} />\n            <GridListTileBar\n              title={tile.owner.login}\n              subtitle={<span>by: {tile.owner.login}</span>}\n              actionIcon={\n                <IconButton aria-label={`info about ${tile.owner.login}`} className={classes.icon}/>\n              }\n            />\n          </GridListTile>\n        ))}\n      </GridList>\n    </div>):<p>No Data</p>}\n    </div>\n    }else{\n      gridListItems = <div>{\n        isFetching && <div className={classes.loaderroot}>\n        {/* <CircularProgress /> */}\n        <CircularProgress color=\"secondary\" />\n      </div>\n      }\n      {this.props.todos.UIdata.length != 0 ?(\n      <div className={classes.root}>\n      <GridList cellHeight={180} cols={3} >\n        {/* <GridListTile key=\"Subheader\" style={{ height: 'auto' }}>\n        </GridListTile> */}\n        {this.props.todos.UIdata.map((tile) => (\n          <GridListTile key={tile.id}>\n            <img src={tile.avatar_url} alt={tile.login} />\n            <GridListTileBar\n              title={tile.login}\n              subtitle={<span>by: {tile.login}</span>}\n              actionIcon={\n                <IconButton aria-label={`info about ${tile.login}`} className={classes.icon}/>\n              }\n            />\n          </GridListTile>\n        ))}\n      </GridList>\n    </div>):<p>No Data</p>}\n    </div>\n    }\n    return (\n      <div>\n      <div style={{display: 'flex', alignItems: 'center',justifyContent: 'center',}}> \n      \n        <TextField id=\"standard-search\" \n        label=\"Start typing to search\" \n        value= {searchPitem} \n        variant=\"filled\"\n        onChange={event => this.callApis(event.target.value)}/>\n\n        <FormControl variant=\"filled\" className={classes.formControl}>\n        <InputLabel htmlFor=\"filled-age-native-simple\">Type</InputLabel>\n        <Select\n          native\n          value={selected}\n          onChange={event => this.handleChange(event.target.value)}\n          inputProps={{\n            id: 'filled-age-native-simple',\n          }}\n        >\n          {/* <option aria-label=\"None\" value=\"\" /> */}\n          <option value={\"\"}>-Select-</option>\n          <option value={\"users\"}>Users</option>\n          <option value={\"repositories\"}>Repositories</option>\n        </Select>\n      </FormControl>\n</div>\n      {gridListItems}\n      </div>\n    );\n  }\n}\n\nSearcher.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n      todos: state.DataReducer\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n      ...bindActionCreators({ fetchToDos }, dispatch)\n  }\n}\n\nexport default compose(withStyles(styles),connect(mapStateToProps, mapDispatchToProps))(Searcher);\n"]},"metadata":{},"sourceType":"module"}